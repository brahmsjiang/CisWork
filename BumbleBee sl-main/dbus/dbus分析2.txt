
<node name="/com/cisco/WebexAssistant">
  <interface name="com.cisco.WebexAssistant">
    <signal name="FromWebexAssistant">														/////server端调用client端
            <arg name="name" type="s" direction="in" />
            <arg name="payload" type="s" direction="in" />
    </signal>
    <method name="FromClient">																		/////client端调用server端
            <arg name="json" type="s" direction="in" />
    </method>
  </interface>
</node>


class DBusServer																////AssistantDBusMessageServiceImpl.cpp
    : public com::cisco::WebexAssistant_adaptor	====》server端继承因定义interface而自动生成的adaptor类, 并实现其中的method函数
    , public DBus::IntrospectableAdaptor
    , public DBus::PropertiesAdaptor
    , public DBus::ObjectAdaptor
{
		virtual void FromClient(const std::string& json) override;		/////server端被调用
};


std::shared_ptr<DBusServer> dbus_server;

bool AssistantDBusMessageServiceImpl::sendMessage(const std::string& name, const std::string& payload)
    dbus_server->FromWebexAssistant(name, payload);		/////server端调用



----------------------------------
class DBusClient
    : public com::cisco::WebexAssistant_proxy		====》client端继承因定义interface而自动生成的proxy类, 并实现其中的signal函数
    , public DBus::IntrospectableProxy
    , public DBus::PropertiesProxy
    , public DBus::ObjectProxy
{
public:
    DBusClient(DBus::Connection& conn);
    virtual void FromWebexAssistant(const std::string& name, const std::string& payload);	/////client端被调用
    FromWebexAssistant(const std::string& name, const std::string& payload);
};

class AssistantDBusMessageClientImpl
{
public:
    AssistantDBusMessageClientImpl(DBus::Connection& conn);
    void sendMessage(std::string json){
    	client_->FromClient(json);																													/////client调用
    }
    void RegisterMessageCB(AssistantClientMessageCb cb);
    DBusClient* client_;
};
std::shared_ptr<AssistantDBusMessageClientImpl> create_assistant_client(DBus::Connection& conn);




============
qdbus 如果获取刚刚注册的adaptors对象

	QDBusMessage QDBusMessage::createMethodCall(const QString &service, const QString &path,


void QDBusConnectionPrivate::doDispatch()
~~~
or
~~~
qDBusSignalFilter(DBusConnection *connection, DBusMessage *message, void *data)
or
~~~
void QDBusConnectionPrivate::activateObject(ObjectTreeNode &node, const QDBusMessage &msg,
or
~~~
QDBusMessage QDBusConnectionPrivate::sendWithReplyLocal(const QDBusMessage &message)
---》	
	bool QDBusConnectionPrivate::handleMessage(const QDBusMessage &amsg)   <---看起来更像这个
		case QDBusMessage::MethodCallMessage:
	void QDBusConnectionPrivate::handleObjectCall(const QDBusMessage &msg)
	~~~
	or
	~~~
	bool QObject::event(QEvent *e)
		case QEvent::MetaCall:
	void QDBusActivateObjectEvent::placeMetaCall(QObject *)
	~~~
	====>void QDBusConnectionPrivate::activateObject(ObjectTreeNode &node, const QDBusMessage &msg,
			activateCall(it->adaptor, newflags, msg					《--------qdbus
			
			
	emit activated(
	  preallocated->queue_link->data = message;
	  _dbus_message_add_counter_link (message,
	                                  preallocated->counter_link);
                                  
                                  
                                  
        (* function) (connection, new_status, data);     《------貌似最终调客户代码是这个? 



QDBusConnectionPrivate *QDBusConnectionManager::connectToBus(QDBusConnection::BusType type, const QString &name,
                                                             bool suspendedDelivery)
QDBusConnectionManager::QDBusConnectionManager()
    connect(this, &QDBusConnectionManager::connectionRequested, this, &QDBusConnectionManager::executeConnectionRequest, Qt::BlockingQueuedConnection);
            
            
            
            
//socket signal
bool QSocketNotifier::event(QEvent *e)
    case QEvent::SockAct:
    case QEvent::SockClose:
        {
            QPointer<QSocketNotifier> alive(this);
            emit activated(d->sockfd, d->sntype, QPrivateSignal());

            
//qt调用send的逻辑
(* transport->vtable->do_iteration) (transport)
--
static  void socket_do_iteration (DBusTransport *transport,			《----do_iteration