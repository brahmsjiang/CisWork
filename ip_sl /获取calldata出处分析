

        return (MyData)getData() .callInfo.calledParty;



        callFeature = new CallFeature ("Call-" + ordinal);
					    CallFeature (final String callLabel) {
        			super(callLabel, false, CallControlState.INACTIVE.getId(), new MyData());
    		}
    		
    		public Feature (final String label, final boolean enabled, final int state, final Object data ) {  <==参数就是data
	        this ( label, INVOKE_DEFAULT, enabled, state, data,
	               NO_HELP, IInfo.CORE_APP );
	    	}
	    	《===初始化MyData应该是NULL，不会有value
	    	
寻觅设置MyData的地方：
	    void setCalledParty (final CallPartyId calledParty) {
        final CallInfo prevCallInfo = ((MyData)getData()).callInfo;
        ( (MyData) getData()).callInfo = new CallInfo(prevCallInfo.callType,
                calledParty, prevCallInfo.callingParty);
    }
    or====

        SipCcEventDispatcher.addListener(callControlStatusSink, mgmtSink, mgmtHandler, callList,
--------添加listener分析
注册
SystemManager.registerService(CallControlServiceIF.class, embraceRouter);
获取
				service = SystemManager.getService(CallControlServiceIF.class);
				
        final CallControlServiceIF callContrlService = (CallControlServiceIF)service.
                getInterface(CallControlServiceIF.class);

        callControlStatusSink = callContrlService.getCallControlServiceApi();//返回的就是 SIPUIListener


	===>        SipCcEventDispatcher.addListener(callControlStatusSink, mgmtSink, mgmtHandler, callList,
                subscriptionHandler, skHandler);

							调用到的是
					public void callInfo(CallHandle callHandle, CallType callType, CallPartyId callingParty,				// SIPUIListener
                CallPartyId calledPartyName, CallPartyId originalCalledParty, CallPartyId lastRedirectingParty,
                CallPartyId huntPilotParty, CallId callId, CallSecurity callSecurity, String calDisplayText,
                boolean isCallLogInfo) {
            ccProxy.callInfo(callHandle, callType, callingParty, calledPartyName, originalCalledParty,		//来自EmbraceCcRouter, 看proxy到底是哪个
                    lastRedirectingParty, huntPilotParty, callId, callSecurity, calDisplayText, isCallLogInfo);
        }

----proxy到底是哪个分析----

						callControlProxy = (ICallControl.Proxy) getQueueManager().createProxy(new ICallControl.Dispatcher(myListeners), ICallControl.FAMILY);
						    public InterfaceProxy createProxy (
						        final MessageSink sink, final MessageFamily family ) {
						
						        InterfaceProxy proxy = family.createProxy ( queue );  //Proxy在这里创建, 通过family的createProxy来创建
						        proxyMap.put ( proxy, sink );
						
						        return proxy;
						    }
						
            EmbraceCcRouter embraceRouter = new EmbraceCcRouter();
            embraceRouter.init(this, callControlProxy, managmentProxy);

						最终调用的是Proxy的callinfo里面的getSink().sinkMessage
						public void callInfo (  final CallHandle callHandle, final CallType callType,
                final CallPartyId callingParty,
                final CallPartyId calledParty,
                final CallPartyId originalCalledParty,
                final CallPartyId lastRedirectingParty,
                final CallPartyId huntPilotParty,
                final CallId callId, final CallSecurity callSecurity,
                final String calDisplayText,
                final boolean isCallLogInfo) {

				            getSink().sinkMessage(new ParamMessage (FAMILY, this, ID_CALL_INFO, 
				            <===哪个sink的sinkMessage呢? 是Dispatcher的sinkMessage,而Dispatcher里面的listener指向MyListeners
				                callHandle,
				                callType,
				                callingParty,
				                calledParty,
				                originalCalledParty,
				                lastRedirectingParty,
				                huntPilotParty,
				                callId, callSecurity, calDisplayText, new Boolean(isCallLogInfo)));

				        							private static void sinkMessage ( final ICallControl listener, Message message ) { <===继续调Dispatcher的sinkMessage
							                    case Proxy.ID_CALL_INFO:																<=====终于调到了MyListeners的callInfo!!!!!!!!!!!!
							                        listener.callInfo ((CallHandle)pm.getParam1(),
							                                           (CallType)pm.getParam2(),
							                                           (CallPartyId)pm.getParam3(),
							                                           (CallPartyId)pm.getParam4(),
							                                           (CallPartyId)pm.getParam5(),
							                                           (CallPartyId)pm.getParam6(),
							                                           (CallPartyId)pm.getParam7(),
							                                           (CallId)pm.getParam8(),
							                                           (CallSecurity)pm.getParam9(),
							                                           (String)pm.getParam10(),
							                                           ((Boolean)pm.getParam11()).booleanValue());
							                                           
										                theLines.get(callHandle)
										                    .get(callHandle)
										                    .callInfo(callType, callingParty, calledParty, originalCalledParty, lastRedirectingParty, <===call.java!!!!
										                            huntPilotParty, callId, callSecurity, calDisplayText, isCallLogInfo);

				        							}


---------
public static void onCallEvent(int callEvent, int call, int callInfo) {	//SipCcEventDispacher.java
	static void updateCallInfo (ObservedCall ocall, int callInfo, boolean sendCallInfo, boolean updateGlobalId) {	//SipCcEventDispacher.java

        public void callInfo(final CallHandle callHandle, final CallType callType, final CallPartyId callingParty,	//call.java
                final CallPartyId calledParty, final CallPartyId originalCalledParty,
                final CallPartyId lastRedirectingParty, final CallPartyId huntPilotParty, final CallId callId,
                final CallSecurity callSecurity, final String calDisplayText, final boolean isCallLogInfo) {
    void callInfo(final CallType callType,	<===call.java!!!!
                  final CallPartyId callingParty,
                  final CallPartyId calledParty,
                  final CallPartyId originalCalledParty,
                  final CallPartyId lastRedirectingParty,
                  final CallPartyId huntPilotParty,
                  final CallId callId, final CallSecurity callSecurity,
                  final String calDisplayText,
                  final boolean isCallLogInfo) {
                  
	    void setCallInfo (final CallInfo callInfo) {	//callfeatture.java
	        ((MyData)getData()).callInfo = callInfo;
	    }
